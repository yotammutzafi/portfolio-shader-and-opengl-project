#version 330 core
out vec4 FragColor;

in vec4 FragPos;
in vec3 Normal;
in vec2 Tex;
//in vec3 ModelPos  ;
in vec3 ViewPos;

layout (std140) uniform Light_Data_8
{
    vec3 L_position_0;
	vec3 L_direction_0;
	vec3 L_ambient_0;
	vec3 L_diffuse_0;
	vec3 L_specular_0;
    mat4 lightView;
};


uniform  sampler2D  shadow_map_8;



struct Material {
    sampler2D  materialTexture;
    float      shininess      ;
}; 

uniform Material  material;



float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth;
    if(projCoords.x<0.0 || projCoords.x>1.0 || projCoords.y<0.0 || projCoords.y>1.0|| projCoords.z<0.0 || projCoords.z>1.0)
    {
    return 0.0f;
    }
    else{
    closestDepth = texture(shadow_map_8, projCoords.xy).r; 
     }
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // check whether current frag pos is in shadow
    float shadow = currentDepth > closestDepth  ? 1.0 : 0.0;

    return shadow;
}  
void main()
{ 

vec3 norm = normalize(Normal);


     // ambient_0
    vec3 ambient_0 = L_ambient_0 * texture(material.materialTexture, Tex).rgb;

     
     // diffuse_0 
    
   vec3 relativeDirLight_0 = normalize(L_position_0 - vec3(FragPos));
   
    float diff_0 = max(dot(norm, relativeDirLight_0), 0.0);
    vec3 diffuse_0 = L_diffuse_0 * diff_0 * texture(material.materialTexture, Tex).rgb;  

    // specular_0
    vec3 specular_0 = vec3(0.0f,0.0f,0.0f);
    if(diff_0 !=0.0)
    {
    vec3 viewDir_0 = normalize(ViewPos - vec3(FragPos));
    vec3 reflectDir_0 = reflect(-relativeDirLight_0, norm);  
    float spec_0 = pow(max(dot(viewDir_0, reflectDir_0), 0.0), material.shininess);
    vec3 specular_0 = L_specular_0 * spec_0 * texture(material.materialTexture, Tex).rgb;  
    }
    
    

    if( ((mod(FragPos.x,1.0f) >0.95) ||(mod(FragPos.x,1.0f) <0.05))   && (abs(dot(norm,vec3(1.0f,0.0f,0.0f)))<0.9) )
    {
       FragColor = vec4( 0.3f,0.3f,0.8f, 1.0);
    }


   
    else 
    if( ((mod(FragPos.y,1.0f) >0.95) ||(mod(FragPos.y,1.0f) <0.05))   && (abs(dot(norm,vec3(0.0f,1.0f,0.0f)))<0.9) )
    {
       FragColor = vec4( 0.3f,0.3f,0.8f, 1.0);
    }
    
    else                                                
    if( ((mod(FragPos.z,1.0f) >0.95) ||(mod(FragPos.z,1.0f) <0.05))   && (abs(dot((norm),vec3(0.0f,0.0f,1.0f)))  <0.9) )
    {
       FragColor = vec4( 0.3f,0.3f,0.8f, 1.0);
    }
    
   else 
    {
    ////////

    vec4 shadowPos_temp = (lightView*FragPos);
    float shadow =ShadowCalculation(shadowPos_temp);
  //  vec3 shadowPos = shadowPos_temp.xyz /shadowPos_temp.w;
    // shadowPos = shadowPos * 0.5 + 0.5;

     


 
    

    if(shadow>0.5f )

    {
    FragColor = vec4( ambient_0, 1.0);
    }
    
    
   
    else if (shadow==0.0f)
    {

    FragColor = vec4( ambient_0 + diffuse_0 + specular_0, 1.0);
  
    
    } 
    
     else
     {
        FragColor = vec4( 0.0f,1.0f,0.0f, 1.0);

     }
 
    }

// FragColor = vec4( texture(material.materialTexture, Tex).rgb, 1.0);


}